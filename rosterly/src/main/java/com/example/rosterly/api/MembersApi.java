/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.rosterly.api;

import com.example.rosterly.model.Member;
import com.example.rosterly.model.MemberCreate;
import com.example.rosterly.model.MemberUpdate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-27T10:12:24.329052600+09:00[Asia/Tokyo]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Member", description = "the Member API")
public interface MembersApi {

    default MembersApiDelegate getDelegate() {
        return new MembersApiDelegate() {};
    }

    /**
     * GET /members : メンバー一覧取得
     *
     * @param companyId 会社IDで絞り込み（A社フロントで保持する Company リストの ID を渡す） (optional)
     * @return メンバー一覧 (status code 200)
     */
    @Operation(
        operationId = "membersGet",
        summary = "メンバー一覧取得",
        tags = { "Member" },
        responses = {
            @ApiResponse(responseCode = "200", description = "メンバー一覧", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Member.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/members",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Member>> membersGet(
        @Parameter(name = "companyId", description = "会社IDで絞り込み（A社フロントで保持する Company リストの ID を渡す）", in = ParameterIn.QUERY) @Valid @RequestParam(value = "companyId", required = false) Integer companyId
    ) throws Exception {
        return getDelegate().membersGet(companyId);
    }


    /**
     * DELETE /members/{memberId} : 特定メンバー削除
     *
     * @param memberId メンバーID (required)
     * @return 削除完了 (status code 204)
     */
    @Operation(
        operationId = "membersMemberIdDelete",
        summary = "特定メンバー削除",
        tags = { "Member" },
        responses = {
            @ApiResponse(responseCode = "204", description = "削除完了")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/members/{memberId}"
    )
    
    default ResponseEntity<Void> membersMemberIdDelete(
        @Parameter(name = "memberId", description = "メンバーID", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    ) throws Exception {
        return getDelegate().membersMemberIdDelete(memberId);
    }


    /**
     * GET /members/{memberId} : 特定メンバー取得
     *
     * @param memberId メンバーID (required)
     * @return メンバー詳細 (status code 200)
     */
    @Operation(
        operationId = "membersMemberIdGet",
        summary = "特定メンバー取得",
        tags = { "Member" },
        responses = {
            @ApiResponse(responseCode = "200", description = "メンバー詳細", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Member.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/members/{memberId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Member> membersMemberIdGet(
        @Parameter(name = "memberId", description = "メンバーID", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    ) throws Exception {
        return getDelegate().membersMemberIdGet(memberId);
    }


    /**
     * PUT /members/{memberId} : 特定メンバー更新
     *
     * @param memberId メンバーID (required)
     * @param memberUpdate  (required)
     * @return 更新完了 (status code 200)
     */
    @Operation(
        operationId = "membersMemberIdPut",
        summary = "特定メンバー更新",
        tags = { "Member" },
        responses = {
            @ApiResponse(responseCode = "200", description = "更新完了", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Member.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/members/{memberId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Member> membersMemberIdPut(
        @Parameter(name = "memberId", description = "メンバーID", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId,
        @Parameter(name = "MemberUpdate", description = "", required = true) @Valid @RequestBody MemberUpdate memberUpdate
    ) throws Exception {
        return getDelegate().membersMemberIdPut(memberId, memberUpdate);
    }


    /**
     * POST /members : メンバー新規作成
     *
     * @param memberCreate  (required)
     * @return 作成完了 (status code 201)
     */
    @Operation(
        operationId = "membersPost",
        summary = "メンバー新規作成",
        tags = { "Member" },
        responses = {
            @ApiResponse(responseCode = "201", description = "作成完了", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Member.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Member> membersPost(
        @Parameter(name = "MemberCreate", description = "", required = true) @Valid @RequestBody MemberCreate memberCreate
    ) throws Exception {
        return getDelegate().membersPost(memberCreate);
    }

}
